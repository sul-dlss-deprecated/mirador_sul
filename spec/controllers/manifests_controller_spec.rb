require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ManifestsController, type: :controller do
  let(:user) { create('user') }
  let(:collection) { create('collection', user: user) }

  # This should return the minimal set of attributes required to create a valid
  # Manifest. As you add validations to Manifest, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      url: 'http://example.com/iiif/manifest.json',
      collections: [collection],
      user: user
    }
  end

  let(:invalid_attributes) do
    {
      url: nil,
      collections: [collection],
      user: user
    }
  end

  before { sign_in user }

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new Manifest' do
        expect do
          post :create, params: { collection_id: collection, manifest: valid_attributes }
        end.to change(Manifest, :count).by(1)
      end

      it 'assigns a newly created manifest as @manifest' do
        post :create, params: { collection_id: collection, manifest: valid_attributes }
        expect(assigns(:manifest)).to be_a(Manifest)
        expect(assigns(:manifest)).to be_persisted
      end

      it 'redirects to the collection edit page' do
        post :create, params: { collection_id: collection, manifest: valid_attributes }
        expect(response).to redirect_to(edit_collection_path(collection))
      end
    end

    context 'with invalid params' do
      it 'redirects to the collection page (with flash alert)' do
        post :create, params: { collection_id: collection, manifest: invalid_attributes }
        expect(response).to redirect_to(collection)
        expect(flash[:alert]).to eq 'There was a problem creating the manifest.'
      end
    end
  end

  describe 'DELETE #destroy' do
    it 'destroys the requested manifest' do
      manifest = Manifest.create! valid_attributes
      expect do
        delete :destroy, params: { collection_id: collection, id: manifest.to_param }
      end.to change(Manifest, :count).by(-1)
    end

    it 'redirects to the manifests list' do
      manifest = Manifest.create! valid_attributes
      delete :destroy, params: { collection_id: collection, id: manifest.to_param }
      expect(response).to redirect_to(collection)
    end
  end
end
